blueprint:
  name: "🌟 Yet Another Light Automation Blueprint - But Smarter!"
  description: >
    💡 This automation controls your lights based on presence/motion sensors! Customize your lights with optional lux sensors and a Do Not Disturb (DND) period 💤. Lights will automatically turn off after a delay when no motion is detected. Improved error handling for DND time parsing to prevent issues with invalid time formats.
  domain: automation
  input:
    ## Presence Settings
    presence_sensors:
      name: Presence Sensors 🕵️‍♂️
      description: Choose presence/motion sensors to control your lights automatically. 📡
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    light_group:
      name: Light Group 💡
      description: Select the light group to be controlled by this automation.
      selector:
        entity:
          domain: light

    ## Lux Sensor Settings
    lux_sensor:
      name: Lux Sensor 🌞 (Optional)
      description: Use a lux sensor to decide if the current brightness level needs adjusting.
      default: ""
      selector:
        entity:
          domain: sensor
    lux_threshold:
      name: Lux Threshold 🌡️
      description: Set the brightness threshold for when the lux sensor should activate the lights. 📊
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: lx

    ## Sun Condition Settings
    use_sun_condition:
      name: Sun Condition ☀️
      description: Enable this to adjust lights based on the sun's position.
      default: true
      selector:
        boolean: {}

    ## Light Timeout Settings
    light_timeout:
      name: Light Timeout ⏲️ (seconds)
      description: Set how long the lights stay on after no presence is detected.
      default: 15
      selector:
        number:
          min: 1
          max: 3600
          unit_of_measurement: seconds

    ## Do Not Disturb (DND) Settings
    dnd_toggle:
      name: Do Not Disturb (DND) Mode 🚫💤 (Optional)
      description: Toggle to enable or disable Do Not Disturb mode.
      default: false
      selector:
        boolean: {}
    dnd_start_time:
      name: DND Start Time 🕒 (Optional)
      description: Set the start time for Do Not Disturb. 🕰️
      default: ""
      selector:
        time: {}
    dnd_end_time:
      name: DND End Time 🕒 (Optional)
      description: Set the end time for Do Not Disturb. 🕰️
      default: ""
      selector:
        time: {}

    ## Light Transition Settings
    transition_duration:
      name: Transition Duration 🌅
      description: How long should light transitions take (in seconds)?
      default: 2
      selector:
        number:
          min: 0.1
          max: 30
          step: 0.5
          unit_of_measurement: seconds

    ## Light Control Settings
    use_brightness:
      name: Control Brightness 🔆
      description: Enable to set custom brightness
      default: false
      selector:
        boolean: {}

    brightness_level:
      name: Brightness Level
      description: Set the brightness level (1-100%)
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider

    use_color_temp:
      name: Control Color Temperature 🌡️
      description: Enable to set custom color temperature
      default: false
      selector:
        boolean: {}

    color_temp:
      name: Color Temperature
      description: Set the color temperature (2000K-6500K)
      default: 4000
      selector:
        number:
          min: 2000
          max: 6500
          step: 100
          unit_of_measurement: K
          mode: slider

    ## Circadian Settings
    use_circadian:
      name: Use Circadian Rhythm 🌓
      description: Enable adaptive lighting based on time of day
      default: false
      selector:
        boolean: {}

    circadian_mode:
      name: Circadian Mode
      description: Choose what should adapt to time of day
      default: both
      selector:
        select:
          options:
          - label: "Color Temperature Only"
            value: color
          - label: "Brightness Only"
            value: brightness
          - label: "Both"
            value: both

    circadian_source:
      name: Circadian Source
      description: Choose whether to base circadian rhythm on sun or moon position
      default: sun
      selector:
        select:
          options:
          - label: "Sun Position ☀️"
            value: sun
          - label: "Moon Position 🌙"
            value: moon

    # Base values for adjustment
    max_brightness:
      name: Maximum Brightness (%)
      description: Peak brightness level (usually during midday)
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    min_brightness:
      name: Minimum Brightness (%)
      description: Lowest brightness level (usually during night)
      default: 40
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    max_color_temp:
      name: Maximum Color Temperature (K)
      description: Coolest color temperature (usually during midday)
      default: 5500
      selector:
        number:
          min: 2000
          max: 6500
          step: 100
          unit_of_measurement: K

    min_color_temp:
      name: Minimum Color Temperature (K)
      description: Warmest color temperature (usually during night/evening)
      default: 2200
      selector:
        number:
          min: 2000
          max: 6500
          step: 100
          unit_of_measurement: K

variables:
  lux_threshold: !input lux_threshold
  lux_sensor: !input lux_sensor
  dnd_start_time: !input dnd_start_time
  dnd_end_time: !input dnd_end_time
  use_sun_condition: !input use_sun_condition
  light_group: !input light_group
  dnd_toggle: !input dnd_toggle
  use_circadian: !input use_circadian
  circadian_mode: !input circadian_mode
  brightness_level: !input brightness_level
  color_temp: !input color_temp
  use_brightness: !input use_brightness
  use_color_temp: !input use_color_temp
  max_brightness: !input max_brightness
  min_brightness: !input min_brightness
  max_color_temp: !input max_color_temp
  min_color_temp: !input min_color_temp

trigger:
- platform: state
  entity_id: !input presence_sensors
  to: "on"
  id: presence_detected
- platform: state
  entity_id: !input presence_sensors
  to: "off"
  for:
    seconds: !input light_timeout
  id: presence_gone

condition:
- condition: template
  value_template: >
    {% if not dnd_toggle %}
      true
    {% elif not dnd_start_time or not dnd_end_time %}
      true
    {% else %}
      {% set current = now().strftime('%H:%M') %}
      {% set start = dnd_start_time[0:5] %}
      {% set end = dnd_end_time[0:5] %}
      {% if start <= end %}
        {{ not (start <= current <= end) }}
      {% else %}
        {{ not (current >= start or current <= end) }}
      {% endif %}
    {% endif %}

action:
- service: logbook.log
  data:
    name: "Debug Automation"
    message: "Triggered automation with trigger: {{ trigger.id | default('unknown') }}"
- service: logbook.log
  data:
    name: "Debug Automation"
    message: >
      Checking lux conditions: Current lux: {{ states(lux_sensor) if lux_sensor else "not defined" }} Threshold: {{ lux_threshold }} Comparison result: {{ states(lux_sensor) | float < lux_threshold if lux_sensor else "no sensor" }}
- choose:
  - conditions:
    - condition: trigger
      id: presence_detected
    - condition: and
      conditions:
      - condition: template
        value_template: >
          {{ is_state(light_group, 'off') }}
      - condition: or
        conditions:
        - condition: and
          conditions:
          - condition: template
            value_template: >
              {{ use_sun_condition if use_sun_condition is defined else true }}
          - condition: sun
            before: sunrise
            before_offset: "+0:30:00"
            after: sunset
            after_offset: "-0:30:00"
        - condition: template
          value_template: >
            {% if lux_sensor == '' or lux_sensor is none %}
              true
            {% elif states(lux_sensor) in ['unknown', 'unavailable', 'none', ''] %}
              false
            {% else %}
              {% set lux = states(lux_sensor) | float(-1) %}
              {% if lux < 0 %}
                false
              {% else %}
                {% set threshold = lux_threshold | float(50) %}
                {{ lux < threshold }}
              {% endif %}
            {% endif %}
    sequence:
    - variables:
        sun_elevation: "{{ state_attr('sun.sun', 'elevation')|float }}"
        factor: "{{ ((sun_elevation + 90) / 180)|float }}"
        current_brightness: "{{ ((min_brightness + ((max_brightness - min_brightness) * factor))|round) }}"
        current_temp: "{{ ((min_color_temp + ((max_color_temp - min_color_temp) * factor))|round) }}"
    - choose:
      - conditions:
        - "{{ not use_circadian and use_brightness and use_color_temp }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            brightness_pct: !input brightness_level
            color_temp: !input color_temp
      - conditions:
        - "{{ not use_circadian and use_brightness and not use_color_temp }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            brightness_pct: !input brightness_level
      - conditions:
        - "{{ not use_circadian and not use_brightness and use_color_temp }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            color_temp: !input color_temp
      - conditions:
        - "{{ use_circadian and circadian_mode == 'both' }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            brightness_pct: "{{ current_brightness }}"
            color_temp: "{{ current_temp }}"
      - conditions:
        - "{{ use_circadian and circadian_mode == 'brightness' }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            brightness_pct: "{{ current_brightness }}"
      - conditions:
        - "{{ use_circadian and circadian_mode == 'color' }}"
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
            color_temp: "{{ current_temp }}"
      - conditions:
        - "{{ true }}" # Default case
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light_group
          data:
            transition: !input transition_duration
  - conditions:
    - condition: trigger
      id: presence_gone
    sequence:
    - service: logbook.log
      data:
        name: "Debug Automation"
        message: "Presence gone, turning off lights."
    - service: light.turn_off
      target:
        entity_id: !input light_group
      data:
        transition: !input transition_duration
mode: restart
